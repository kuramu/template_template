@charset "utf-8";
// 定義したミックスインを呼び出し
/*.relatedArea {
    @include boxSet;
}
*/

//全体
$main_color: #000; //メインカラー（ベースカラー）
$sub_color: #fff; //サブカラー
$accent_color: #e73562; //アクセントカラー

//テキスト
$font_color: #000; //ベーステキストカラー
$font_linkcolor: #0884B2;//ベーステキストリンクカラー
$font_hovercolor: #0884B2;//ホバーテキストリンクカラー

//ボーダー
$boader-style1:1px solid #000;
$boader-bottom1:1px solid #000;

//画像のパス
$img_path: "../images/";
//使い方background: url(#{$img_path}bg.png) repeat;

// ミックスインを定義
@mixin css3($property, $value) {
     @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
          #{$prefix}#{$property}: $value;
     }
}//@include css3(transition, 0.5s);

@mixin absPosition ($top: auto, $right: auto, $bottom: auto, $left: auto) {
     position: absolute;
     top: $top;
     right: $right;
     bottom: $bottom;
     left: $left;
}// @include absPosition(5px, 20px, 10px, 15px);  左からtop right bottom left

@mixin vertical-align {
    position: relative;
    top: 50%;
    -webkit-transform: translateY(-50%);
    -ms-transform: translateY(-50%);
    transform: translateY(-50%);
}
//div {
//@include vertical-align();
//}

 @mixin gradient($start-color, $end-color, $orientation)
 {
 background: $start-color;
 @if $orientation == vertical
 {
 // vertical
 background: -moz-linear-gradient(top,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, left bottom, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(top,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to bottom,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=0 );
 }
 @else if $orientation == horizontal
 {
 // horizontal
 background: -moz-linear-gradient(left,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(linear, left top, right top, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -o-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: -ms-linear-gradient(left,  $start-color 0%,$end-color 100%);
 background: linear-gradient(to right,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
 }
 @else
 {
 // radial
 background: -moz-radial-gradient(center, ellipse cover,  $start-color 0%, $end-color 100%);
 background: -webkit-gradient(radial, center center, 0px, center center, 100%, color-stop(0%,$start-color), color-stop(100%,$end-color));
 background: -webkit-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -o-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: -ms-radial-gradient(center, ellipse cover,  $start-color 0%,$end-color 100%);
 background: radial-gradient(ellipse at center,  $start-color 0%,$end-color 100%);
 filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='$start-color', endColorstr='$end-color',GradientType=1 );
 }
 }


//div {
// @include gradient(#ff00ff, #ff00cc, vertical);
// }

//ベンダープレフィックス
/// Mixin to prefix several properties at once
/// @author Hugo Giraudel
/// @param {Map} $declarations - Declarations to prefix
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($declarations, $prefixes: ()) {
  @each $property, $value in $declarations {
    @each $prefix in $prefixes {
      #{'-' + $prefix + '-' + $property}: $value;
    }

    // Output standard non-prefixed declaration
    #{$property}: $value;
  }
}
//.selector {
//  @include prefix((
//    column-count: 3,
//    column-gap: 1.5em
//  ), webkit moz);
//}

//flexbox
@mixin flexbox
{
    display:-webkit-box; // old
    display:-moz-box; // old
    display:-ms-flexbox; // ie
    display:-webkit-flex; // new
    display:flex; // new
}
@mixin flex-flow($direction: row , $wrap: nowrap)
{
    -webkit-flex-flow: $direction $wrap;
    flex-flow: $direction $wrap;
}
@mixin justify-content($justify-content-type)
{
    -webkit-justify-content: $justify-content-type;
    justify-content: $justify-content-type;
}
@mixin align-items($align-items-type)
{
    -webkit-align-items: $align-items-type;
    align-items: $align-items-type;
}
@mixin align-self($align-self-type)
{
    -webkit-align-self: $align-self-type;
    align-self: $align-self-type;
}
@mixin align-content($align-content-type)
{
    -webkit-align-content: $align-content-type;
    align-content: $align-content-type;
}
@mixin flex-grow($grow){
    -webkit-flex-grow: $grow;
    flex-grow: $grow;
}
@mixin flex-shrink($shrink){
    -webkit-flex-shrink: $shrink;
    flex-shrink: $shrink;
}
@mixin flex-basis($basis){
    -webkit-flex-basis: $basis;
    flex-basis: $basis;
}
@mixin order($order){
    -webkit-order: $order;
    order: $order;
}

//rem を使ったフォントサイズ指定
@mixin fontsize($size: 24, $base: 16) {
    font-size: $size + px;
    font-size: ($size / $base) * 1rem;
}

//コンテンツのセンタリング　親にposition: relative;指定する
@mixin centerer
{
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

//サムネイル
.u-thumb-square{
    position: relative;
    overflow: hidden;
    background: #cccccc;
    & > *{
        padding-top: 100%;
        display: block;
        img{
            position: absolute;
            top: 50%;
            left: 50%;
            -webkit-transform: translate(-50%, -50%);
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
            max-width: 200%;
            max-height: 200%;
        }
    }
}
.u-thumb-rect{
    position: relative;
    overflow: hidden;
    background: #cccccc;
    & > *{
        padding-top: 75%;
        display: block;
        img{
            position: absolute;
            top: 50%;
            left: 50%;
            -webkit-transform: translate(-50%, -50%);
            -ms-transform: translate(-50%, -50%);
            transform: translate(-50%, -50%);
            max-width: 200%;
            max-height: 200%;
        }
    }
}
